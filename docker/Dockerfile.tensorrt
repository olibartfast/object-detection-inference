
# Stage 1: Cuda dependencies
ARG UBUNTU_VERSION=24.04
ARG NGC_CUDA_VERSION=12.6.3
FROM nvcr.io/nvidia/cuda:${NGC_CUDA_VERSION}-devel-ubuntu${UBUNTU_VERSION} as cuda_dependencies

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies with version pinning
RUN apt-get update && apt-get upgrade -y && \
    apt-get install -y \
    cmake=3.* \
    build-essential=12.* \
    libopencv-dev \
    libgoogle-glog-dev \
    wget \
    git \
    && rm -rf /var/lib/apt/lists/*

# Stage 2: Install TensorRT dependencies
FROM cuda_dependencies AS backend_dependencies

ARG BACKEND=TENSORRT

# TensorRT version configuration
ARG TRT_MAJOR=10
ARG TRT_MINOR=.7
ARG TRT_PATCH=.0
ARG TRT_BUILD=.23
ARG TRT_VERSION=${TRT_MAJOR}${TRT_MINOR}${TRT_PATCH}${TRT_BUILD}
ARG TRT_CUDA_VERSION=12.6
ARG TENSORRT_DIR=/opt/tensorrt

# Download and install TensorRT
RUN wget --tries=3 --retry-connrefused \
    https://developer.nvidia.com/downloads/compute/machine-learning/tensorrt/${TRT_MAJOR}${TRT_MINOR}${TRT_PATCH}/tars/TensorRT-${TRT_VERSION}.Linux.x86_64-gnu.cuda-${TRT_CUDA_VERSION}.tar.gz \
    && tar -xzvf TensorRT-${TRT_VERSION}.Linux.x86_64-gnu.cuda-${TRT_CUDA_VERSION}.tar.gz -C /opt \
    && rm TensorRT-${TRT_VERSION}.Linux.x86_64-gnu.cuda-${TRT_CUDA_VERSION}.tar.gz

# Set TensorRT environment variables
ENV LD_LIBRARY_PATH=/opt/TensorRT-${TRT_VERSION}/lib:${LD_LIBRARY_PATH}
ENV LIBRARY_PATH=/opt/TensorRT-${TRT_VERSION}/lib:${LIBRARY_PATH}
ENV CPATH=/opt/TensorRT-${TRT_VERSION}/include:${CPATH}

# Set TensorRT environment variables
ENV LD_LIBRARY_PATH=${TENSORRT_DIR}/lib:${LD_LIBRARY_PATH}
ENV LIBRARY_PATH=${TENSORRT_DIR}/lib:${LIBRARY_PATH}
ENV PATH=${TENSORRT_DIR}/include:${PATH}
# Stage 3: Copy application code and build
FROM backend_dependencies AS builder

WORKDIR /app

COPY . .

# Build the project using CMake
RUN cmake -Bbuild -H. -DDEFAULT_BACKEND=$BACKEND -DTRT_VERSION=$TRT_VERSION -DTENSORRT_DIR=$TENSORRT_DIR && \
    cmake --build build --config Release

# Stage 4: Final image
FROM backend_dependencies AS final

WORKDIR /app

# Copy the executable
COPY --from=builder /app/build/app/object-detection-inference /app/object-detection-inference

# Copy the shared libraries
COPY --from=builder /app/build/detectors/libdetectors.so /app/
COPY --from=builder /app/build/_deps/neuriplo-build/libneuriplo.so /app/
COPY --from=builder /app/build/_deps/videocapture-build/libVideoCapture.so /app/

# Set the LD_LIBRARY_PATH to include the directory where the `.so` files are located
ENV LD_LIBRARY_PATH=/app:${LD_LIBRARY_PATH}

# Set the entry point to the compiled executable
ENTRYPOINT ["./object-detection-inference"]
